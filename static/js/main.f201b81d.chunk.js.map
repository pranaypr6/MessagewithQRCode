{"version":3,"sources":["assets/images.svg","Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Footer","id","className","left","href","target","QRCode","require","App","useState","isOpen","setIsOpen","input","setInput","qrQuery","setQrQuery","error","setError","getQr","value","useEffect","Navbar","light","expand","NavbarBrand","style","color","fontSize","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","NavLink","Row","Col","md","xs","sm","src","alt","height","width","marginTop","padding","textAlign","Alert","InputGroup","Input","onChange","e","placeholder","InputGroupAddon","addonType","Button","trim","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.f201b81d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/images.87c4be26.svg\";","import React from \"react\";\r\nimport LinkedInIcon from \"@material-ui/icons/LinkedIn\";\r\nimport InstagramIcon from \"@material-ui/icons/Instagram\";\r\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\r\nimport TwitterIcon from \"@material-ui/icons/Twitter\";\r\nimport Roll from \"react-reveal/Roll\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div id=\"about\">\r\n      <h5>Contact Me</h5>\r\n      <ul className=\"social\">\r\n        <Roll left>\r\n          <li>\r\n            <a\r\n              href=\"https://www.linkedin.com/in/pranay-burra-3b55731aa/\"\r\n              target=\"blank\"\r\n            >\r\n              <LinkedInIcon />\r\n            </a>\r\n          </li>\r\n        </Roll>\r\n        <Roll left>\r\n          <li>\r\n            <a href=\"https://www.instagram.com/prannuhh/\" target=\"blank\">\r\n              <InstagramIcon />\r\n            </a>\r\n          </li>\r\n        </Roll>\r\n        <Roll left>\r\n          <li>\r\n            <a href=\"https://mobile.twitter.com/pranay_burra\" target=\"blank\">\r\n              <TwitterIcon />\r\n            </a>\r\n          </li>\r\n        </Roll>\r\n        <Roll left>\r\n          <li>\r\n            <a href=\"https://github.com/pranaypr6\" target=\"blank\">\r\n              <GitHubIcon />\r\n            </a>\r\n          </li>\r\n        </Roll>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  Row,\n  Col,\n  InputGroup,\n  Input,\n  InputGroupAddon,\n  Button,\n  Alert,\n} from \"reactstrap\";\nimport Footer from \"./Footer\";\nconst QRCode = require(\"qrcode.react\");\n\nconst App = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const toggle = () => setIsOpen(!isOpen);\n  const [input, setInput] = useState(\"\");\n  const [qrQuery, setQrQuery] = useState(\"https://instagram.com/unknowndev_\");\n  const [error, setError] = useState(false);\n\n  const getQr = () => {\n    return <QRCode value={qrQuery} />;\n  };\n\n  useEffect(() => {\n    getQr();\n  }, [qrQuery]);\n\n  const handleClick = () => {\n    setError(false);\n    const myInput = input.trim();\n    if (myInput === \"\") {\n      setError(true);\n    } else {\n      setQrQuery(input);\n      setInput(\"\");\n    }\n  };\n\n  return (\n    <div>\n      <div>\n        <Navbar light expand=\"md\" className=\"nav-bar\">\n          <NavbarBrand\n            href=\"https://pranaypr6.github.io/MessagewithQRCode/\"\n            className=\"navbrand\"\n            style={{ color: \"#007bff\", fontSize: \"25px\" }}\n          >\n            Express with QR\n          </NavbarBrand>\n          <NavbarToggler onClick={toggle} />\n          <Collapse isOpen={isOpen} navbar>\n            <Nav className=\"ml-auto\" navbar>\n              <NavItem>\n                <NavLink href=\"#about\" className=\"navitem\">\n                  Contact\n                </NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink\n                  href=\"https://github.com/pranaypr6\"\n                  target=\"blank\"\n                  className=\"navitem\"\n                >\n                  GitHub\n                </NavLink>\n              </NavItem>\n            </Nav>\n          </Collapse>\n        </Navbar>\n      </div>\n      <Row>\n        <Col md=\"6\" xs=\"12\" sm=\"12\">\n          <img\n            src={require(\"./assets/images.svg\")}\n            alt=\"\"\n            height=\"100%\"\n            width=\"100%\"\n          />\n        </Col>\n        <Col md=\"6\" xs=\"12\" className=\"text-center\">\n          <div\n            style={{ marginTop: \"8em\", padding: \"30px\", textAlign: \"center\" }}\n          >\n            <h3 style={{ color: \"#007bff\" }}>\n              Enter Your Message And Get QR Code\n            </h3>\n            {error && <Alert color=\"danger\">Please Enter Something</Alert>}\n            <div className=\"qr-title\">\n              Qr Code for <p>\" {qrQuery} \"</p> is\n            </div>\n            {getQr()}\n          </div>\n          <div className=\"input\">\n            <InputGroup style={{ width: \"80%\" }}>\n              <Input\n                onChange={(e) => setInput(e.target.value)}\n                placeholder=\"Enter your message here\"\n                value={input}\n              />\n              <InputGroupAddon addonType=\"append\">\n                <Button color=\"primary\" onClick={handleClick}>\n                  Get QR Code\n                </Button>\n              </InputGroupAddon>\n            </InputGroup>\n          </div>\n        </Col>\n      </Row>\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n\n// <input type=\"text\" onChange={(e) => setInput(e.target.value)} />\n// <button onClick={handleClick}>Get qr </button>\n// {getQr()}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}